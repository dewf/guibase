module Windowing;

import Drawing;

void moduleInit();
void moduleShutdown();

void runloop();
void exitRunloop();

enum MouseButton {
   None,
   Left,
   Middle,
   Right,
   Other
}

flags Modifiers {
   Shift = 1 << 0,
   Control = 1 << 1, // command on mac
   Alt = 1 << 2,
   MacControl = 1 << 3
}

enum WindowStyle {
   Default,
   Frameless,
   PluginWindow   // for VST/AU/etc
}

options WindowOptions {
   // each of these will provide a setter and will keep track of whether it "exists" or not
   // basically a quicker way of implementing a group of optional settings without either flags or sumtypes
   int minWidth;
   int minHeight;
   int maxWidth;
   int maxHeight;
   WindowStyle style;
   // windows-only:
   size_t nativeParent; // HWND actually
}

exception DropDataBadFormat(string format); // until we have an Option<> or Result<> type for the result of getFormat()

// constants for easy checking
// might want to create a way to enumerate what's in the DropData for easy inspection ...
// but these are used by both DropData and DragData ...
string kDragFormatUTF8;
string kDragFormatFiles;

opaque DropData {
   bool hasFormat(string mimeFormat);
   Array<string> getFiles() throws DropDataBadFormat;
   string getTextUTF8() throws DropDataBadFormat;
   Buffer<byte> getFormat(string mimeFormat) throws DropDataBadFormat;
}

flags DropEffect {
   None = 0,
   Copy = 1 << 0,
   Move = 1 << 1,
   Link = 1 << 2,
   Other = 1 << 3 // ask / private / etc
}

opaque DragData {
   void addFormat(string dragFormatMIME);    // drag source: we're capable of generating this format
   DropEffect execute(DropEffect canDoMask); // modal/blocking (note: currently missing *fromEvent parameter, which I think was required for GTK)

   static DragData create(Window forWindow);
}

opaque DragRenderPayload {
   void renderUTF8(string text);
   void renderFiles(Array<string> filenames);
   void renderFormat(string formatMIME, Buffer<byte> data);
}

interface WindowDelegate {
   bool canClose();
   void closed();
   void destroyed();
   void mouseDown(int x, int y, MouseButton button, Modifiers modifiers);
   void mouseUp(int x, int y, MouseButton button, Modifiers modifiers);
   void mouseMove(int x, int y, Modifiers modifiers);
   void mouseEnter(int x, int y, Modifiers modifiers);
   void mouseLeave(Modifiers modifiers);
   void repaint(DrawContext context, int x, int y, int width, int height);
   void moved(int x, int y);
   void resized(int width, int height);
   void keyDown(Key key, Modifiers modifiers, KeyLocation location);

   // dnd drag
   void dragRender(DragRenderPayload payload, string requestedFormatMIME);

   // dnd drop
   DropEffect dropFeedback(DropData data, int x, int y, Modifiers modifiers, DropEffect suggested);
   void dropLeave();
   void dropSubmit(DropData data, int x, int y, Modifiers modifiers, DropEffect effect);
}

opaque Window {
   void show();
   void showRelativeTo(Window other, int x, int y, int newWidth, int newHeight); // use "0" for newWidth/newHeight for no change, until we have Option<>
   void hide();
   void destroy();
   void setMenuBar(MenuBar menuBar);
   void showContextMenu(int x, int y, Menu menu); // hmm, had a "fromEvent" parameter I think for GTK
   void invalidate(int x, int y, int width, int height);
   void setTitle(string title);
   void enableDrops(bool enable);

   static Window create(int width, int height, string title, WindowDelegate del, WindowOptions opts);
}

delegate void TimerFunc(double secondsSinceLast);

opaque Timer {
   static Timer create(int msTimeout, TimerFunc func);
}

// menu stuff

opaque Icon {
   static Icon create(string filename, int sizeToWidth);
}

opaque Accelerator {
   static Accelerator create(Key key, Modifiers modifiers);
}

delegate void MenuActionFunc();

opaque Action {
   static Action create(string label, Icon icon, Accelerator accel, MenuActionFunc func);
}

opaque MenuItem;
opaque Menu {
   MenuItem addAction(Action action);
   MenuItem addSubmenu(string label, Menu sub);
   void addSeparator();

   static Menu create();   // for menu bars and standalone popups
}


opaque MenuBar {
   MenuItem addMenu(string label, Menu menu);
   
   static MenuBar create();
}

enum KeyLocation {
   Default,
   Left,
   Right,
   NumPad
}

enum Key {
   Unknown,
   //
   Escape,
   Tab,
   Backspace,
   Return,
   Space,
   //
   F1,
   F2,
   F3,
   F4,
   F5,
   F6,
   F7,
   F8,
   F9,
   F10,
   F11,
   F12,
   F13,
   F14,
   F15,
   F16,
   F17,
   F18,
   F19,
   //
   _0,
   _1,
   _2,
   _3,
   _4,
   _5,
   _6,
   _7,
   _8,
   _9,
   //
   A,
   B,
   C,
   D,
   E,
   F,
   G,
   H,
   I,
   J,
   K,
   L,
   M,
   N,
   O,
   P,
   Q,
   R,
   S,
   T,
   U,
   V,
   W,
   X,
   Y,
   Z,
   // modifiers
   Control,
   Shift,
   AltOption,
   WinCommand,
   Fn,
   // home/end block
   Insert,
   Delete,
   PageUp,
   PageDown,
   Home,
   End,
   // arrow keys
   LeftArrow,
   UpArrow,
   RightArrow,
   DownArrow,
   // keypad numbers
   KP0,
   KP1,
   KP2,
   KP3,
   KP4,
   KP5,
   KP6,
   KP7,
   KP8,
   KP9,
   // keypad ops
   KPClear,
   KPEquals,
   KPDivide,
   KPMultiply,
   KPSubtract,
   KPAdd,
   KPEnter,
   KPDecimal,
   // locks
   CapsLock,
   NumLock,
   ScrollLock,
   // misc
   PrintScreen,
   Pause,  // Pause/Break button minus Ctrl
   Cancel, // Ctrl-Break
   // media
   MediaMute,
   MediaVolumeDown,
   MediaVolumeUp,
   MediaNext,
   MediaPrev,
   MediaStop,
   MediaPlayPause
}
