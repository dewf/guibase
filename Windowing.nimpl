module Windowing;

import Keys;
import Drawing;

void moduleInit();
void moduleShutdown();

void runloop();
void exitRunloop();

// MISC ==============================================================================

flags Modifiers {
   Shift = 1 << 0,
   Control = 1 << 1, // command on mac
   Alt = 1 << 2,
   MacControl = 1 << 3
}

// MENU ==============================================================================

opaque Icon {
   static {
      Icon create(string filename, int sizeToWidth);
   }
}

opaque Accelerator {
   static {
      Accelerator create(Key key, Modifiers modifiers);
   }
}

opaque MenuAction {
   static {
      delegate void ActionFunc();
      MenuAction create(string label, Icon icon, Accelerator accel, ActionFunc func);
   }
}

opaque MenuItem;

opaque Menu {
   static {
      Menu create();   // for menu bars and standalone popups
   }
   MenuItem addAction(MenuAction action);
   MenuItem addSubmenu(string label, Menu sub);
   void addSeparator();
}

opaque MenuBar {
   static {
      MenuBar create();
   }
   void addMenu(string label, Menu menu);
}

// DATA EXCHANGE ====================================================================

// constants for easy checking
// might want to create a way to enumerate what's in the DropData for easy inspection ...
// but these are used by both DropData and DragData ...
string kDragFormatUTF8;
string kDragFormatFiles;

opaque DropData {
   static {
      exception BadFormat(string format); // until we have an Option<> or Result<> type for the result of getFormat()
   }
   bool hasFormat(string mimeFormat);
   Array<string> getFiles() throws BadFormat;
   string getTextUTF8() throws BadFormat;
   Buffer<byte> getFormat(string mimeFormat) throws BadFormat;
}

flags DropEffect {
   None = 0,
   Copy = 1 << 0,
   Move = 1 << 1,
   Link = 1 << 2,
   Other = 1 << 3 // ask / private / etc
}

opaque DragData {
   static {
      opaque RenderPayload {
         void renderUTF8(string text);
         void renderFiles(Array<string> filenames);
         void renderFormat(string formatMIME, Buffer<byte> data);
      }
      delegate bool RenderFunc(string requestedFormat, RenderPayload payload);
      DragData create(Array<string> supportedFormats, RenderFunc renderFunc);
   }
   DropEffect dragExec(DropEffect canDoMask); // modal/blocking (note: currently missing *fromEvent parameter, which I think was required for GTK)
}

opaque ClipData extends DropData {
   static {
      void setClipboard(DragData dragData); // for sending
      ClipData get();                       // really just a DropData
      void flushClipboard();
   }
}

// WINDOW ============================================================================

enum MouseButton {
   None,
   Left,
   Middle,
   Right,
   Other
}

interface WindowDelegate {
   bool canClose();
   void closed();
   void destroyed();
   void mouseDown(int x, int y, MouseButton button, Modifiers modifiers);
   void mouseUp(int x, int y, MouseButton button, Modifiers modifiers);
   void mouseMove(int x, int y, Modifiers modifiers);
   void mouseEnter(int x, int y, Modifiers modifiers);
   void mouseLeave(Modifiers modifiers);
   void repaint(DrawContext context, int x, int y, int width, int height);
   void moved(int x, int y);
   void resized(int width, int height);
   void keyDown(Key key, Modifiers modifiers, KeyLocation location);
   // dnd drop
   DropEffect dropFeedback(DropData data, int x, int y, Modifiers modifiers, DropEffect suggested);
   void dropLeave();
   void dropSubmit(DropData data, int x, int y, Modifiers modifiers, DropEffect effect);
}

enum CursorStyle {
   Default,                  // IDC_ARROW, normal select
   TextSelect,               // IDC_IBEAM, text select
   BusyWait,                 // IDC_WAIT, busy
   Cross,                    // IDC_CROSS, precision select
   UpArrow,                  // IDC_UPARROW, alternate select
   ResizeTopLeftBottomRight, // IDC_SIZENWSE, diagonal resize 1
   ResizeTopRightBottomLeft, // IDC_SIZENESW, diagonal resize 2
   ResizeLeftRight,          // IDC_SIZEWE, horizontal resize
   ResizeUpDown,             // IDC_SIZENS, vertical resize
   Move,                     // IDC_SIZEALL, move
   Unavailable,              // IDC_NO, unavailable
   HandSelect,               // IDC_HAND, link select
   PointerWorking,           // IDC_APPSTARTING, working in background
   HelpSelect,               // IDC_HELP, help select
   LocationSelect,           // IDC_PIN, location select
   PersonSelect,             // IDC_PERSON, person select
   Handwriting               // MAKEINTRESOURCE(32631), pencil cursor
}

opaque Window {
   static {
      enum Style {
         Default,
         Frameless,
         PluginWindow   // for VST/AU/etc
      }
      options Options {
         // each of these will provide a setter and will keep track of whether it "exists" or not
         // basically a quicker way of implementing a group of optional settings without either flags or sumtypes
         int minWidth;
         int minHeight;
         int maxWidth;
         int maxHeight;
         Style style;
         // windows-only:
         size_t nativeParent; // HWND actually
      }
      Window create(int width, int height, string title, WindowDelegate del, Options opts);
      void mouseUngrab();
   }
   void destroy();
   void show();
   void showRelativeTo(Window other, int x, int y, int newWidth, int newHeight); // use "0" for newWidth/newHeight for no change, until we have Option<>
   void showModal(Window parent);                                                // parent = null for app-modal (otherwise centers inside of parent, and only modal for that window, I think)
   void endModal();                                                              // call to end a modal runloop that we're in
   void hide();
   void invalidate(int x, int y, int width, int height);
   void setTitle(string title);
   void focus();
   void mouseGrab();
   size_t getOSHandle();
   void enableDrops(bool enable);
   void setMenuBar(MenuBar menuBar);
   void showContextMenu(int x, int y, Menu menu); // hmm, had a "fromEvent" parameter I think for GTK
   void setCursor(CursorStyle style);
}

// TIMER =============================================================================

opaque Timer {
   static {
      delegate void TimerFunc(double secondsSinceLast);
      Timer create(int msTimeout, TimerFunc func);
   }
}

// FILE DIALOGS ======================================================================

group FileDialog {
   enum Mode {
      File,
      Folder
   }

   struct FilterSpec {
      string description;
      Array<string> extensions; // no leading '.'
   }

   struct Options {
      Window forWindow;                     // window-modal if provided, otherwise NOT app-modal
      Mode mode;
      Array<FilterSpec> filters;
      bool allowAll;                        // append *.*
      string defaultExt;                    // windows only at the moment (?): "sets the default extension to be added to file names"
      bool allowMultiple;                   // for open mode only
      string suggestedFilename;             // for save mode
   }

   struct DialogResult {
      bool success;
      Array<string> filenames;
   }

   DialogResult openFile(Options opts);
   DialogResult saveFile(Options opts);
}

// MESSAGEBOX ========================================================================

group MessageBoxModal { // 'MessageBox' is a win32 function
   enum Buttons {
      Default = 0,
      AbortRetryIgnore,
      CancelTryContinue,
      Ok,                  // default
      OkCancel,
      RetryCancel,
      YesNo,
      YesNoCancel
   }

   enum Icon {
      Default = 0,
      Information,         // default
      Warning,
      Question,
      Error,
   }

   struct Params {
      string title;           // optional?
      string message;         
      bool withHelpButton;
      Icon icon;
      Buttons buttons;
   }

   enum MessageBoxResult {
      Abort,
      Cancel,
      Continue,
      Ignore,
      No,
      Ok,
      Retry,
      TryAgain,
      Yes
   }

   MessageBoxResult show(Window forWindow, Params mbParams);
}
