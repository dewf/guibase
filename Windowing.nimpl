module Windowing;

import Drawing;

void moduleInit();
void moduleShutdown();

void runloop();
void exitRunloop();

enum MouseButton {
   None,
   Left,
   Middle,
   Right,
   Other
}

enum Modifiers {
   Shift,
   Control,    // or Mac command
   Alt,
   MacControl
}

enum WindowStyle {
   Default,
   Frameless,
   PluginWindow   // for VST/AU/etc
}

options WindowProperties {
   // each of these will provide a setter and will keep track of whether it "exists" or not
   // basically a quicker way of implementing a group of optional settings without either flags or sumtypes
   int minWidth;
   int minHeight;
   int maxWidth;
   int maxHeight;
   WindowStyle style;
   bool nativeParent;
}

interface IWindowDelegate {
   bool canClose();
   void closed();
   void destroyed();
   void mouseDown(int x, int y, MouseButton button, Set<Modifiers> modifiers);
   void repaint(CGContext context, int x, int y, int width, int height);
}

interface IWindow {
   void show();
   void destroy();
}

IWindow createWindow(int width, int height, string title, IWindowDelegate del, WindowProperties props);
