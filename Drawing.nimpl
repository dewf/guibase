module Drawing;

struct Point {
    double x;
    double y;
}

struct Size {
    double width;
    double height;
}

struct Rect {
    Point origin;
    Size size;
}

struct AffineTransform {
    double a;
    double b;
    double c;
    double d;
    double tx;
    double ty;
}
AffineTransform AffineTransformIdentity;

AffineTransform AffineTransformTranslate(AffineTransform input, double tx, double ty);
AffineTransform AffineTransformRotate(AffineTransform input, double angle);
AffineTransform AffineTransformScale(AffineTransform input, double sx, double sy);
AffineTransform AffineTransformConcat(AffineTransform t1, AffineTransform t2);

sumtype AffineTransformOps {
    Translate(double tx, double ty),
    Rotate(double angle),
    Scale(double sx, double sy),
    Concat(AffineTransform t2)
}
AffineTransform AffineTransformModify(AffineTransform input, Array<AffineTransformOps> ops);

enum PathDrawingMode {
    Fill,
    EOFill,
    Stroke,
    FillStroke,
    EOFillStroke
}

// a way of handling optional args until we come up with something direct?
options OptArgs {
    AffineTransform transform;
}


// ideally these would be directly accessible as Color::White etc - like global constants, but namespaced under the opaque
// ColorSpaces should have the same thing: ColorSpace::GenericGray etc
// hmm but what if they are expensive to create? no idea if they are or not ...
// and if we're maintaining them then we're going to see them as leaks on the C++ size, since they would last the entire program
// unless they were explicitly disposed in the module shutdown ...
// lazy initialization perhaps? looks like a property but is actually a function?
// and what about properties for that matter?

enum ColorConstants {
    White,
    Black,
    Clear
}

opaque Color {
    static {
        Color createGenericRGB(double red, double green, double blue, double alpha);
        Color getConstantColor(ColorConstants which);
    }
}

enum ColorSpaceName {
    GenericGray,
    GenericRGB,
    GenericCMYK,
    GenericRGBLinear,
    AdobeRGB1998,
    SRGB,
    GenericGrayGamma2_2
    // many more we don't have yet!
}

opaque ColorSpace {
    static {
        ColorSpace createWithName(ColorSpaceName name);
        ColorSpace createDeviceGray();
    }
}

flags GradientDrawingOptions {
    DrawsBeforeStartLocation = 1 << 0,
    DrawsAfterEndLocation = 1 << 1
}

struct GradientStop {
    double location;
    double red;
    double green;
    double blue;
    double alpha;
}

opaque Gradient {
    static {
        Gradient createWithColorComponents(ColorSpace space, Array<GradientStop> stops);
    }
}

opaque Path {
    Point getCurrentPoint();
    Path createCopy();
    MutablePath createMutableCopy();
    static {
        Path createWithRect(Rect rect, OptArgs optArgs);
        Path createWithEllipseInRect(Rect rect, OptArgs optArgs);
        Path createWithRoundedRect(Rect rect, double cornerWidth, double cornerHeight, OptArgs optArgs);
    }
}

exception MutablePathTransformException(string error);

opaque MutablePath extends Path {
    void addPath(Path path2, OptArgs optArgs);
    void addRect(Rect rect, OptArgs optArgs);
    void addRects(Array<Rect> rects, OptArgs optArgs);
    void addRoundedRect(Rect rect, double cornerWidth, double cornerHeight, OptArgs optArgs);
    void addEllipseInRect(Rect rect, OptArgs optArgs);

    // subpath (current win/linux limitation: all segments must use same [or no] transform - hence the possible exception)
    void moveToPoint(double x, double y, OptArgs optArgs) throws MutablePathTransformException;
    void addArc(double x, double y, double radius, double startAngle, double endAngle, bool clockwise, OptArgs optArgs) throws MutablePathTransformException;
    void addRelativeArc(double x, double y, double radius, double startAngle, double delta, OptArgs optArgs) throws MutablePathTransformException;
    void addArcToPoint(double x1, double y1, double x2, double y2, double radius, OptArgs optArgs) throws MutablePathTransformException;
    void addCurveToPoint(double cp1x, double cp1y, double cp2x, double cp2y, double x, double y, OptArgs optArgs) throws MutablePathTransformException;
    void addLines(Array<Point> points, OptArgs optArgs) throws MutablePathTransformException;
    void addLineToPoint(double x, double y, OptArgs optArgs) throws MutablePathTransformException;
    void addQuadCurveToPoint(double cpx, double cpy, double x, double y, OptArgs optArgs) throws MutablePathTransformException;
    void closeSubpath();
    static {
        MutablePath create();
    }
}

enum TextDrawingMode {
    Fill,
    Stroke,
    FillStroke,
    Invisible,
    FillClip,
    StrokeClip,
    FillStrokeClip,
    Clip
}

opaque DrawContext {
    void saveGState();
    void restoreGState();
    void setRGBFillColor(double red, double green, double blue, double alpha);
    void setRGBStrokeColor(double red, double green, double blue, double alpha);
    void setFillColorWithColor(Color color);
    void fillRect(Rect rect);
    void setTextMatrix(AffineTransform t);
    void setTextPosition(double x, double y);
    void beginPath();
    void addArc(double x, double y, double radius, double startAngle, double endAngle, bool clockwise);
    void addArcToPoint(double x1, double y1, double x2, double y2, double radius);
    void drawPath(PathDrawingMode mode);
    void setStrokeColorWithColor(Color color);
    void strokeRectWithWidth(Rect rect, double width);
    void moveToPoint(double x, double y);
    void addLineToPoint(double x, double y);
    void strokePath();
    void setLineDash(double phase, Array<double> lengths);
    void clearLineDash();                           // maybe until we have an Option<> type or something to use in setLineDash()
    void setLineWidth(double width);
    void clip();
    void clipToRect(Rect clipRect);
    void translateCTM(double tx, double ty);
    void scaleCTM(double scaleX, double scaleY);
    void rotateCTM(double angle);
    void concatCTM(AffineTransform transform);
    void addPath(Path path);
    void fillPath();
    void strokeRect(Rect rect);
    void addRect(Rect rect);
    void closePath();
    void drawLinearGradient(Gradient gradient, Point startPoint, Point endPoint, GradientDrawingOptions drawOpts);
    void setTextDrawingMode(TextDrawingMode mode);

    void clipToMask(Rect rect, Image mask);
    void drawImage(Rect rect, Image image);
}

// text stuff

options AttributedStringOptions {
    Color foregroundColor;
    bool foregroundColorFromContext;
    Font font;
    double strokeWidth;
    Color strokeColor;
    ParagraphStyle paragraphStyle;

    // for custom types, this seems the simplest for now:
    // client will maintain its own ID->value mapping, instead of having to have knowledge of CFDictionary types etc
    // because Core Text ultimately returns a CFDictionary for us for each "run", there's really no way to inject anything with higher level behavior.
    // for example if we wanted a single C# dictionary per run, because CoreText doesn't know anything about client-side data structures, and can't build them up
    // during run analysis - but it can certainly deal with ints! and we can use those to construct our own queryable things per run
    // another option would have been approximating CF* types via a sumtype, and storing things that way.
    // but ints yield greater flexibility, because we can store absolutely whatever on the client side instead (not limiting us to known CF* types)

    // right now this only works for reads, for writes use .setCustomAttribute()
    Map<string,long> custom;
}

// had this as a sumtype (notfound, zero, actual())
// but too annoying / overkill
struct Range {
    long location;
    long length;
}

opaque AttributedString {
    long getLength();
    MutableAttributedString createMutableCopy(long maxLength);
    static {
        AttributedString create(string s, AttributedStringOptions opts);
    }
}

opaque MutableAttributedString extends AttributedString {
    void replaceString(Range range, string str);
    void setAttribute(Range range, AttributedStringOptions attr);
    void setCustomAttribute(Range range, string key, long value); // ID key has client-specific meaning (use a dictionary or something)

    void beginEditing(); // for batch edits
    void endEditing();

    static {
        MutableAttributedString create(long maxLength);
    }
}

options FontTraits {
    bool italic;
    bool bold;
    bool expanded;
    bool condensed;
    bool monospace;
    bool vertical;
    // some others not yet put here
}

opaque Font {
    Font createCopyWithSymbolicTraits(double size, FontTraits newTraits, OptArgs optArgs); // optional matrix was originally next-to-last argument
    double getAscent();
    double getDescent();
    double getUnderlineThickness();
    double getUnderlinePosition();
    static {
        Font createFromFile(string path, double size, OptArgs optArgs);
        Font createWithName(string name, double size, OptArgs optArgs);
    }
}

struct TypographicBounds {
    double width;
    double ascent;
    double descent;
    double leading;
}

flags LineBoundsOptions {
    ExcludeTypographicLeading  = 1 << 0,
    ExcludeTypographicShifts   = 1 << 1,
    UseHangingPunctuation      = 1 << 2,
    UseGlyphPathBounds         = 1 << 3,
    UseOpticalBounds           = 1 << 4
}

flags RunStatus {
    NoStatus = 0,
    RightToLeft = 1 << 0,
    NonMonotonic = 1 << 1,
    HasNonIdentityMatrix = 1 << 2
}

opaque Run {
    AttributedStringOptions getAttributes(Array<string> customKeys);
    TypographicBounds getTypographicBounds(Range range);
    Range getStringRange();
    RunStatus getStatus();
}

opaque Line {
    Range getStringRange();
    TypographicBounds getTypographicBounds();
    Rect getBoundsWithOptions(LineBoundsOptions opts);
    void draw(DrawContext context);
    Array<Run> getGlyphRuns();
    Tuple<double,double> getOffsetForStringIndex(long charIndex); // offset + secondaryOffset
    long getStringIndexForPosition(Point p);
    static {
        Line createWithAttributedString(AttributedString str);
    }
}

struct RunInfo {
    AttributedStringOptions attrs;
    Range sourceRange;
    RunStatus status;
    Rect bounds;
    TypographicBounds typoBounds;
}

struct LineInfo {
    Point origin;
    TypographicBounds lineTypoBounds;
    Array<RunInfo> runs;
}

opaque Frame {
    void draw(DrawContext context);
    Array<Line> getLines();
    Array<Point> getLineOrigins(Range range); // zero range = fetch all

    Array<LineInfo> getLinesExtended(Array<string> customKeys); // a "deep fetch" to spare a ton of frontend calls for iterating the frame runs
}

opaque FrameSetter {
    Frame createFrame(Range range, Path path); // no frameAttributes yet, not sure what they are!
    static {
        FrameSetter createWithAttributedString(AttributedString str);
    }
}

enum TextAlignment {
    Left,
    Right,
    Center,
    Justified,
    Natural
}

sumtype ParagraphStyleSetting {
    alignment(TextAlignment value)
}

opaque ParagraphStyle {
    static {
        ParagraphStyle create(Array<ParagraphStyleSetting> settings); // need to check the source API - would this make more sense as 'options', than providing an Array of settings?
    }
}

// bitmaps ===============

enum ImageAlphaInfo {
    None,               /* For example, RGB. */
    PremultipliedLast,  /* For example, premultiplied RGBA */
    PremultipliedFirst, /* For example, premultiplied ARGB */
    Last,               /* For example, non-premultiplied RGBA */
    First,              /* For example, non-premultiplied ARGB */
    NoneSkipLast,       /* For example, RBGX. */
    NoneSkipFirst,      /* For example, XRGB. */
    Only                /* No color data, alpha data only */
}
    
flags BitmapInfo {
    AlphaInfoMask = 0x1F,
    
    FloatInfoMask = 0xF00,
    FloatComponents = 1 << 8,
    
    ByteOrderMask     = 0x7000,  // ImageByteOrderInfo.Mask,
    ByteOrderDefault  = 0 << 12,
    ByteOrder16Little = 1 << 12, // ImageByteOrderInfo._16Little,
    ByteOrder32Little = 2 << 12, // ImageByteOrderInfo._32Little,
    ByteOrder16Big    = 3 << 12, // ImageByteOrderInfo._16Big,
    ByteOrder32Big    = 4 << 12  // ImageByteOrderInfo._32Big
}

opaque BitmapLock {
    // this will eventually allow buffer access
    // Buffer<byte> getData(); 
}

opaque Image;

opaque BitmapDrawContext extends DrawContext {
    Image createImage();

    // return the memory so it can be edited
    // this API differs from stock Quartz (which can return a void* directly), because Windows needs to lock/unlock the data for writing
    BitmapLock getData();

    // we don't support a void* data argument on this yet
    // (will eventually support a Buffer<whatever> argument)
    static {
        BitmapDrawContext create(int width, int height, int bitsPerComponent, int bytesPerRow, ColorSpace space, BitmapInfo bitmapInfo);
    }
}
