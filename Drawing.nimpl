module Drawing;

import Foundation;

struct Point {
    double x;
    double y;
}

struct Size {
    double width;
    double height;
}

struct Rect {
    Point origin;
    Size size;
}

struct AffineTransform {
    double a;
    double b;
    double c;
    double d;
    double tx;
    double ty;
}
AffineTransform AffineTransformIdentity;

enum PathDrawingMode {
    Fill,
    EOFill,
    Stroke,
    FillStroke,
    EOFillStroke
}

// a way of handling optional args until we come up with something direct?
options OptArgs {
    AffineTransform transform;
}

opaque Path {
    static Path createWithRect(Rect rect, OptArgs optArgs);
    static Path createWithEllipseInRect(Rect rect, OptArgs optArgs);
    static Path createWithRoundedRect(Rect rect, double cornerWidth, double cornerHeight, OptArgs optArgs);
}

opaque DrawContext {
    void saveGState();
    void restoreGState();
    void setRGBFillColor(double red, double green, double blue, double alpha);
    void setRGBStrokeColor(double red, double green, double blue, double alpha);
    void fillRect(Rect rect);
    void setTextMatrix(AffineTransform t);
    void setTextPosition(double x, double y);
    void beginPath();
    void addArc(double x, double y, double radius, double startAngle, double endAngle, bool clockwise);
    void addArcToPoint(double x1, double y1, double x2, double y2, double radius);
    void drawPath(PathDrawingMode mode);
    void setStrokeColorWithColor(Color color);
    void strokeRectWithWidth(Rect rect, double width);
    void moveToPoint(double x, double y);
    void addLineToPoint(double x, double y);
    void strokePath();
    void setLineDash(double phase, Array<double> lengths);
    void clearLineDash();                           // maybe until we have an Option<> type or something to use in setLineDash()
    void setLineWidth(double width);
    void clip();
    void translateCTM(double tx, double ty);
    void scaleCTM(double scaleX, double scaleY);
    void rotateCTM(double angle);
    void concatCTM(AffineTransform transform);
    void addPath(Path path);
    void fillPath();
    void strokeRect(Rect rect);
    void addRect(Rect rect);
    void closePath();
}

opaque Color {
    static Color create(double red, double green, double blue, double alpha);
}

// text stuff

options AttributedStringOptions {
    Font font;
    Color foregroundColor;
}

opaque AttributedString {
    static AttributedString create(string s, AttributedStringOptions opts);
}

opaque Font {
    static Font createFromFile(string path, double size, OptArgs optArgs);
}

struct TypographicBounds {
    double width;
    double ascent;
    double descent;
    double leading;
}

flags LineBoundsOptions {
    ExcludeTypographicLeading  = 1 << 0,
    ExcludeTypographicShifts   = 1 << 1,
    UseHangingPunctuation      = 1 << 2,
    UseGlyphPathBounds         = 1 << 3,
    UseOpticalBounds           = 1 << 4
}

opaque Line {
    TypographicBounds getTypographicBounds();
    Rect getBoundsWithOptions(LineBoundsOptions opts);
    void draw(DrawContext context);

    static Line createWithAttributedString(AttributedString str);
}
