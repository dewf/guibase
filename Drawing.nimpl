module Drawing;

struct Point {
    double x;
    double y;
}

struct Size {
    double width;
    double height;
}

struct Rect {
    Point origin;
    Size size;
}

struct AffineTransform {
    static {
        AffineTransform identity;
        AffineTransform translate(AffineTransform input, double tx, double ty);
        AffineTransform rotate(AffineTransform input, double angle);
        AffineTransform scale(AffineTransform input, double sx, double sy);
        AffineTransform concat(AffineTransform t1, AffineTransform t2);
    }
    double a;
    double b;
    double c;
    double d;
    double tx;
    double ty;
}

// couldn't nest this in the AffineTransform static block because the 'Concat' value references the struct itself, a big no-no in C++
group AffineBatchOps {
    sumtype Value {
        Translate(double tx, double ty),
        Rotate(double angle),
        Scale(double sx, double sy),
        Concat(AffineTransform t2)
    }
    AffineTransform process(AffineTransform init, Array<Value> ops);
}

opaque Color {
    static {
        // ideally these would be directly accessible as Color::White etc - like global constants, but namespaced under the opaque
        // ColorSpaces should have the same thing: ColorSpace::GenericGray etc
        // hmm but what if they are expensive to create? no idea if they are or not ...
        // and if we're maintaining them then we're going to see them as leaks on the C++ size, since they would last the entire program
        // unless they were explicitly disposed in the module shutdown ...
        // lazy initialization perhaps? looks like a property but is actually a function?
        // and what about properties for that matter?
        enum Constant {
            White,
            Black,
            Clear
        }
        Color createGenericRGB(double red, double green, double blue, double alpha);
        Color getConstantColor(Constant which);
    }
}

opaque ColorSpace {
    static {
        enum Name {
            GenericGray,
            GenericRGB,
            GenericCMYK,
            GenericRGBLinear,
            AdobeRGB1998,
            SRGB,
            GenericGrayGamma2_2
            // many more we don't have yet!
        }
        ColorSpace createWithName(Name name);
        ColorSpace createDeviceGray();
    }
}


opaque Gradient {
    static {
        flags DrawingOptions {
            DrawsBeforeStartLocation = 1 << 0,
            DrawsAfterEndLocation = 1 << 1
        }
        struct Stop {
            double location;
            double red;
            double green;
            double blue;
            double alpha;
        }
        Gradient createWithColorComponents(ColorSpace space, Array<Stop> stops);
    }
}

opaque Path {
    static {
        enum DrawingMode {
            Fill,
            EOFill,
            Stroke,
            FillStroke,
            EOFillStroke
        }
        Path createWithRect(Rect rect, Option<AffineTransform> transform);
        Path createWithEllipseInRect(Rect rect, Option<AffineTransform> transform);
        Path createWithRoundedRect(Rect rect, double cornerWidth, double cornerHeight, Option<AffineTransform> transform);
    }
    Point getCurrentPoint();
    Path createCopy();
    MutablePath createMutableCopy();
}

opaque MutablePath extends Path {
    static {
        exception TransformException(string error);
        MutablePath create();
    }
    void addPath(Path path2, Option<AffineTransform> transform);
    void addRect(Rect rect, Option<AffineTransform> transform);
    void addRects(Array<Rect> rects, Option<AffineTransform> transform);
    void addRoundedRect(Rect rect, double cornerWidth, double cornerHeight, Option<AffineTransform> transform);
    void addEllipseInRect(Rect rect, Option<AffineTransform> transform);

    // subpath (current win/linux limitation: all segments must use same [or no] transform - hence the possible exception)
    void moveToPoint(double x, double y, Option<AffineTransform> transform) throws TransformException;
    void addArc(double x, double y, double radius, double startAngle, double endAngle, bool clockwise, Option<AffineTransform> transform) throws TransformException;
    void addRelativeArc(double x, double y, double radius, double startAngle, double delta, Option<AffineTransform> transform) throws TransformException;
    void addArcToPoint(double x1, double y1, double x2, double y2, double radius, Option<AffineTransform> transform) throws TransformException;
    void addCurveToPoint(double cp1x, double cp1y, double cp2x, double cp2y, double x, double y, Option<AffineTransform> transform) throws TransformException;
    void addLines(Array<Point> points, Option<AffineTransform> transform) throws TransformException;
    void addLineToPoint(double x, double y, Option<AffineTransform> transform) throws TransformException;
    void addQuadCurveToPoint(double cpx, double cpy, double x, double y, Option<AffineTransform> transform) throws TransformException;
    void closeSubpath();
}

enum TextDrawingMode {
    Fill,
    Stroke,
    FillStroke,
    Invisible,
    FillClip,
    StrokeClip,
    FillStrokeClip,
    Clip
}

opaque DrawContext {
    void saveGState();
    void restoreGState();
    void setRGBFillColor(double red, double green, double blue, double alpha);
    void setRGBStrokeColor(double red, double green, double blue, double alpha);
    void setFillColorWithColor(Color color);
    void fillRect(Rect rect);
    void setTextMatrix(AffineTransform t);
    void setTextPosition(double x, double y);
    void beginPath();
    void addArc(double x, double y, double radius, double startAngle, double endAngle, bool clockwise);
    void addArcToPoint(double x1, double y1, double x2, double y2, double radius);
    void drawPath(Path.DrawingMode mode);
    void setStrokeColorWithColor(Color color);
    void strokeRectWithWidth(Rect rect, double width);
    void moveToPoint(double x, double y);
    void addLineToPoint(double x, double y);
    void strokePath();
    void setLineDash(double phase, Array<double> lengths);
    void clearLineDash();
    void setLineWidth(double width);
    void clip();
    void clipToRect(Rect clipRect);
    void translateCTM(double tx, double ty);
    void scaleCTM(double scaleX, double scaleY);
    void rotateCTM(double angle);
    void concatCTM(AffineTransform transform);
    void addPath(Path path);
    void fillPath();
    void strokeRect(Rect rect);
    void addRect(Rect rect);
    void closePath();
    void drawLinearGradient(Gradient gradient, Point startPoint, Point endPoint, Gradient.DrawingOptions drawOpts);
    void setTextDrawingMode(TextDrawingMode mode);

    void clipToMask(Rect rect, Image mask);
    void drawImage(Rect rect, Image image);
}

// bitmaps ===============

enum ImageAlphaInfo {
    None,               /* For example, RGB. */
    PremultipliedLast,  /* For example, premultiplied RGBA */
    PremultipliedFirst, /* For example, premultiplied ARGB */
    Last,               /* For example, non-premultiplied RGBA */
    First,              /* For example, non-premultiplied ARGB */
    NoneSkipLast,       /* For example, RBGX. */
    NoneSkipFirst,      /* For example, XRGB. */
    Only                /* No color data, alpha data only */
}
    
flags BitmapInfo {
    AlphaInfoMask = 0x1F,
    
    FloatInfoMask = 0xF00,
    FloatComponents = 1 << 8,
    
    ByteOrderMask     = 0x7000,  // ImageByteOrderInfo.Mask,
    ByteOrderDefault  = 0 << 12,
    ByteOrder16Little = 1 << 12, // ImageByteOrderInfo._16Little,
    ByteOrder32Little = 2 << 12, // ImageByteOrderInfo._32Little,
    ByteOrder16Big    = 3 << 12, // ImageByteOrderInfo._16Big,
    ByteOrder32Big    = 4 << 12  // ImageByteOrderInfo._32Big
}

opaque BitmapLock {
    // this will eventually allow buffer access
    // Buffer<byte> getData(); 
}

opaque Image;

opaque BitmapDrawContext extends DrawContext {
    // we don't support a void* data argument on this yet
    // (will eventually support a Buffer<whatever> argument)
    static {
        BitmapDrawContext create(int width, int height, int bitsPerComponent, int bytesPerRow, ColorSpace space, BitmapInfo bitmapInfo);
    }

    Image createImage();

    // return the memory so it can be edited
    // this API differs from stock Quartz (which can return a void* directly), because Windows needs to lock/unlock the data for writing
    BitmapLock getData();
}
